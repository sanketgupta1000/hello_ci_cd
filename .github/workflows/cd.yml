name: Docker Image CD to EC2

# run on merge or push to master
on:
  push:
    branches: [ "master" ]

# will have 2 jobs: one to build and push image to dockerhub, other to pull on ec2 and run it as a container
jobs:

  build_and_deploy:

    runs-on: ubuntu-latest

    steps:

      # checkout code first
      - name: Checkout code
        uses: actions/checkout@v4

      # then login to dockerhub
      - name: Docker Login
        uses: docker/login-action@v3.6.0
        with:
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # then generate timestamp
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      # then build and push
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          # List of tags
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/hello_ci_cd:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/hello_ci_cd:${{ steps.timestamp.outputs.timestamp }}
          # Sets the target stage to build
          target: final
  deploy_on_ec2:
    runs-on: ubuntu-latest
    needs: build_and_deploy
    steps:

      # first setup ssh to use the private key
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ vars.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: SSH into EC2 and deploy
        run: |
          ssh ${{ vars.EC2_USERNAME }}@${{ vars.EC2_PUBLIC_IP }} << 'EOF'
            # first stop all running containers
            docker ps -q | xargs -r docker stop
            # remove all stopped containers
            docker ps -a -q | xargs -r docker rm
            # remove all images
            docker images -q | xargs -r docker rmi -f
            # pull the latest image from dockerhub
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/hello_ci_cd:latest
            # run the container
            docker run -d -p 80:80 --name hello_ci_cd-container ${{ secrets.DOCKERHUB_USERNAME }}/hello_ci_cd:latest
            exit
          EOF

      - name: Clean up SSH
        run: |
          rm -rf ~/.ssh